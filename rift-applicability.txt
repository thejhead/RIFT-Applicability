



RIFT WG                                                 Yuehua. Wei, Ed.
Internet-Draft                                              Zheng. Zhang
Intended status: Informational                           ZTE Corporation
Expires: 28 December 2020                              Dmitry. Afanasiev
                                                                  Yandex
                                                            Tom. Verhaeg
                                                        Juniper Networks
                                                     Jaroslaw. Kowalczyk
                                                           Orange Polska
                                                              P. Thubert
                                                           Cisco Systems
                                                                 J. Head
                                                        Juniper Networks
                                                            26 June 2020


                           RIFT Applicability
                    draft-ietf-rift-applicability-01

Abstract

   This document discusses the properties, applicability and operational
   considerations of RIFT in different network scenarios.  It intends to
   provide a rough guide how RIFT can be deployed to simplify routing
   operations in Clos topologies and their variations.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 28 December 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.




Wei, et al.             Expires 28 December 2020                [Page 1]

Internet-Draft        RIFT Applicability Statement             June 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Problem Statement of Routing in Modern IP Fabric Fat Tree
           Networks  . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Applicability of RIFT to IP Fabrics . . . . . . . . . . . . .   3
     3.1.  Overview of RIFT  . . . . . . . . . . . . . . . . . . . .   4
       3.1.1.  South Reflection  . . . . . . . . . . . . . . . . . .   6
     3.2.  Applicable Topologies . . . . . . . . . . . . . . . . . .   6
       3.2.1.  Directed Acyclic Graph Concepts . . . . . . . . . . .   6
       3.2.2.  East-West Links . . . . . . . . . . . . . . . . . . .   7
       3.2.3.  Vertical Shortcuts  . . . . . . . . . . . . . . . . .   8
   4.  Use Cases . . . . . . . . . . . . . . . . . . . . . . . . . .   8
     4.1.  Data Center Fabrics . . . . . . . . . . . . . . . . . . .   8
     4.2.  Metro Fabrics . . . . . . . . . . . . . . . . . . . . . .   9
     4.3.  Enterprise Fabrics  . . . . . . . . . . . . . . . . . . .   9
     4.4.  CloudCO . . . . . . . . . . . . . . . . . . . . . . . . .   9
     4.5.  Internal Router Switching Fabrics . . . . . . . . . . . .  11
   5.  Deployment Considerations . . . . . . . . . . . . . . . . . .  11
     5.1.  Route Disaggregation  . . . . . . . . . . . . . . . . . .  12
       5.1.1.  Positive Disaggregation . . . . . . . . . . . . . . .  12
       5.1.2.  Negative Disaggregation . . . . . . . . . . . . . . .  13
     5.2.  Suboptimal Routing on Link Failures . . . . . . . . . . .  14
     5.3.  Black-Holing on Link Failures . . . . . . . . . . . . . .  16
     5.4.  Zero Touch Provisioning (ZTP) . . . . . . . . . . . . . .  17
       5.4.1.  LEAF_ONLY Flag  . . . . . . . . . . . . . . . . . . .  17
     5.5.  Miscabling Examples . . . . . . . . . . . . . . . . . . .  18
     5.6.  Mobile Edge and Anycast . . . . . . . . . . . . . . . . .  20
     5.7.  Address Family Considerations . . . . . . . . . . . . . .  22
       5.7.1.  IPv4 over IPv6  . . . . . . . . . . . . . . . . . . .  22
     5.8.  In-Band Reachability of Nodes . . . . . . . . . . . . . .  23
     5.9.  Server Connectivity to the Fabric . . . . . . . . . . . .  24
       5.9.1.  Multihoming Servers . . . . . . . . . . . . . . . . .  24
       5.9.2.  Securing Servers  . . . . . . . . . . . . . . . . . .  26
     5.10. Fabrics with a Controller . . . . . . . . . . . . . . . .  26
       5.10.1.  Controller Attached to ToF . . . . . . . . . . . . .  26
       5.10.2.  Controller Attached to Leaf  . . . . . . . . . . . .  27
     5.11. Internet Connectivity with Underlay . . . . . . . . . . .  27
       5.11.1.  Internet Default on the Leaf . . . . . . . . . . . .  27



Wei, et al.             Expires 28 December 2020                [Page 2]

Internet-Draft        RIFT Applicability Statement             June 2020


       5.11.2.  Internet Default on the ToFs . . . . . . . . . . . .  27
     5.12. Subnet Mismatches . . . . . . . . . . . . . . . . . . . .  27
     5.13. Anycast Considerations  . . . . . . . . . . . . . . . . .  28
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  28
   7.  Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  29
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .  29
   9.  Informative References  . . . . . . . . . . . . . . . . . . .  30
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  30

1.  Introduction

   This document intends to explain the properties and applicability of
   "Routing in Fat Trees" [RIFT] in different deployment scenarios and
   highlight the operational simplicity of the technology compared to
   traditional routing solutions.  It also documents special
   considerations when RIFT is used with or without overlays,
   controllers and identifies topology mis-cablings and/or node and link
   failures.

2.  Problem Statement of Routing in Modern IP Fabric Fat Tree Networks

   Clos and Fat-Tree topologies have gained prominence in today's
   networking, primarily as result of the paradigm shift towards a
   centralized data-center based architecture that is poised to deliver
   the majority of compute and storage services in the future.

   Current routing protocols are geared toward a network with an
   ierregular topology and low degree of connectivity.  Challenges arise
   when these protocols are applied to Fat-Tree topologies:

   *  Extensive configuration is required during initial provisioning
      and scaling efforts.

   *  Spine and leaf nodes are required to store all network topology
      and routing information.  Leaf nodes do not require this for
      normal operation.

   *  Protocol scalability, bandwidth, and control plane processing are
      all negatively impacted due to duplication of routing information
      flooded between spine and leaf nodes.

3.  Applicability of RIFT to IP Fabrics

   Further content of this document assumes that the reader is familiar
   with the terms and concepts used in OSPF [RFC2328], IS-IS
   [ISO10589-Second-Edition], [RIFT].





Wei, et al.             Expires 28 December 2020                [Page 3]

Internet-Draft        RIFT Applicability Statement             June 2020


3.1.  Overview of RIFT

   RIFT is a dynamic routing protocol for Clos and fat-tree network
   topologies.  It defines a link-state protocol behavior when "pointing
   north" and distance vector protocol behavior when "pointing south".

   It floods flat link-state information northbound only so that each
   level obtains the full topology of levels south of it.  Routing
   information flooded northbound is never re-flooded to south nodes or
   east-west nodes (when applicable).  Top-of-Fabric nodes will have a
   full view of the topology (i.e. all prefixes) once SPF calculation is
   complete.

   In the southbound direction the protocol operates like a fully
   summarizing, unidirectional distance vector protocol with an implicit
   split horizon mechanism.  Routing information (usually just a default
   route) propagates one hop south and is re-originated by those nodes
   at the lower level in the same manner.

               +-----------+          +-----------+
               |  ToF21    |          |   ToF22   |         LEVEL 2
     +         +-----+--+--+          +-+--+------+
     |         |     |  |  |          | |  |      |      ^
     +         |     |  |  +-------------------------+   |
     Distance  |  +-------------------+ |  |      |  |   |
     Vector    |  |  |  |               |  |      |  |   +
     South     |  |  |  |      +--------+  |      |  |   Link State
     +         |  |  |  |      |           |      |  |   Flooding
     |         |  |  +-------------+       |      |  |   North
     v         |  |     |      |   |       |      |  |   +
             +-+--+-+   +------+   +-------+   +--+--+-+ |
             | S111 |   | S112 |   | S121  |   | S122  | |  LEVEL 1
     +       ++----++   ++---+-+   +--+--+-+   ++----+-+ |
     +        |    |     |   |        |  |      |    |   |      ^ N
     Distance |    +-------+ |        |  +--------+  |   |      |   E
     Vector   |          | | |        |         | |  |   |  <------->
     South    |  +-------+ | |        | +-------+ |  |   |  W   |
     +        |  |         | |        | |         |  |   |    S v
     v       ++--++      +-+-++      ++-+-+     +-+--++  +
             |L111|      |L112|      |L121|     |L122 |     LEVEL 0
             +----+      +----+      +----+     +-----+


                          Figure 1: Rift overview

   A middle tier node has only information necessary for its level,
   which are all destinations south of the node based on SPF
   calculation, default route and potential disaggregated routes.



Wei, et al.             Expires 28 December 2020                [Page 4]

Internet-Draft        RIFT Applicability Statement             June 2020


   RIFT combines the advantages of both link-state and distance vector
   protocols:

   *  Fastest possible convergence

   *  Automatic detection of topology

   *  Minimal routing information on leaves/ToRs

   *  High degree of ECMP

   *  Fast de-commissioning of nodes

   *  Fast and efficient convergence

   RIFT improves upon existing disadvantages of link-state and distance
   vector protocols by:


   *  Reducing flooding scope to a minimum

   *  Automatically detecting neighbors


   There are many more operational advantages that are outlined in
   greater detail in [RIFT].

   *  "True" ZTP implementation that doesn't require any configuration
      and can identify mis-cabling errors.

   *  Minimum possible blast radius on failures due to nodes only
      containing relevant routing information and automatic route
      disaggregation.

   *  Simplified leaf implementations that can scale down to servers.

   *  Horizontal (east/west) links can be implemented for improved fault
      tolerance.

   *  Utilizes all viable loop-free paths through the fabric.

   *  Supports both equal cost and non-equal cost multipath load-
      balancing.

   *  Asymmetric bandwidth adjustments are possible.

   *  Inherent control plane security.




Wei, et al.             Expires 28 December 2020                [Page 5]

Internet-Draft        RIFT Applicability Statement             June 2020


3.1.1.  South Reflection

   South reflection is the mechanism where South TIEs are reflected back
   toward the north, allowing nodes to be aware of other nodes in the
   same level.

   Referring to the example in Figure 1,
   Spine111\Spine112\Spine121\Spine122 will reflect Node S-TIEs from
   ToF21 to ToF22 and also from ToF22 to ToF21.  The result will be that
   ToF21 and ToF22 will see each others level 2 node information.

3.2.  Applicable Topologies

   Albeit RIFT is designed primarily for "proper" Clos or fat tree
   topologies, it also supports topologies with multiple PoDs (point-of-
   delivery) and multi-plane fabrics.

   The specification explains the support of multi-plane fabrics by
   implementing a set of rings to allow the protocol to reconcile the
   full topological view of the different planes.  This is the most
   desirable as it makes RIFT's disaggregation capabilities viable in
   different failure scenarios (e.g. fallen leaves).

3.2.1.  Directed Acyclic Graph Concepts

   RIFT is an anisotropic routing protocol, meaning that it has a sense
   of direction (Northbound, Southbound, East, West) and that it
   operates differently depending on the direction.

   *  Northbound, RIFT operates as a Link State IGP, whereby the control
      packets are reflooded first all the way North and only interpreted
      later.  All the individual fine grained routes are advertised.

   *  Southbound, RIFT operates as a Distance Vector IGP, whereby the
      control packets are flooded only one hop, interpreted, and the
      consequence of that computation is what gets flooded on more hop
      South.  In the most common use-cases, a ToF node can reach most of
      the prefixes in the fabric.  If that is the case, the ToF node
      advertises the fabric default and disaggregates the prefixes that
      it cannot reach.  On the oethr hand, a ToF Node that can reach
      only a small subset of the prefixes in the fabric will preferably
      advertise those prefixes and refrain from aggregating.

      In the general case, what gets advertised South is in more
      details:






Wei, et al.             Expires 28 December 2020                [Page 6]

Internet-Draft        RIFT Applicability Statement             June 2020


      1.  A fabric default that aggregates all the prefixes that are
          reachable within the fabric, and that could be a default route
          or a prefix that is dedicated to this particular fabric.

      2.  The loopback addresses of the Northbound nodes, e.g., for
          inband management.

      3.  The disaggregated prefixes for the dynamic exceptions to the
          fabric Default, advertised to route around the black hole that
          may form

   *  East-West routing can optionally be used, with specific
      restrictions.  It is useful in particular when a sibling has
      access to the fabric default but this node does not.

   A Directed Acyclic Graph (DAG) provides a sense of North (the
   direction of the DAG) and of South (the reverse), which can be used
   to apply RIFT.  For the purpose of RIFT an edge in the DAG that has
   only incoming vertices is a ToF node.

   There are a number of caveats though:

   *  The DAG structure must exist before RIFT starts, so there is a
      need for a companion protocol to establish the logical DAG
      structure.

   *  A generic DAG does not have a sense of East and West.  The
      operation specified for East-West links and the Southbound
      reflection between nodes are not applicable.

   *  In order to aggregate and disaggregate routes, RIFT requires that
      all the ToF nodes share the full knowledge of the prefixes in the
      fabric.  This can be achieved with a ring as suggested by the RIFT
      main specification, by some preconfiguration, or using a
      synchronization with a common repository where all the active
      prefixes are registered.

3.2.2.  East-West Links

   RIFT is not purely limited to Clos networks with PoDs and/or multiple
   planes.  It also supports horizontal links below the top-of-fabric
   level to be used as routes of last resort when a node loses all
   northbound links or cannot compute a default route through them.  Or,
   in the case of multiple planes, at the top-of-fabric level to
   exchange northbound routing information between planes (these will
   links will NEVER be used for forwarding.)





Wei, et al.             Expires 28 December 2020                [Page 7]

Internet-Draft        RIFT Applicability Statement             June 2020


   A possible configuration is a "ring" of horizontal links at a level.
   In presence of such a "ring" in any level (except ToF level) neither
   N-SPF nor S-SPF will provide a "ring-based protection" scheme since
   such a computation would have to deal necessarily with breaking of
   "loops" in Dijkstra sense; an application for which RIFT is not
   intended.

   Nodes at the same level can be connected as a full-mesh, which allows
   N-SPF to provide fault tolerance to any node that has lost its
   northbound adjacencies (as long as any of the other east-west
   connected nodes have at least one northbound adjacency).

3.2.3.  Vertical Shortcuts

   Through relaxations of the specified adjacency formation rules, RIFT
   implementations can be extended to support vertical "shortcuts"
   between levels as proposed by [I-D.white-distoptflood].  The RIFT
   specification itself does not provide the exact details since the
   resulting solution suffers from either much larger blast radius with
   increased flooding volumes or in case of maximum aggregation routing
   bow-tie problems.

4.  Use Cases

4.1.  Data Center Fabrics

   RIFT's creation was driven primarily by Clos based data center
   underlay networks and is clearly suited for that role.  RIFT
   addresses many of the common operational issues in these networks (as
   outlined in Section 5).

   Data centers typically have the most densely connected Clos
   topologies, especially when they are considered non-blocking (i.e.
   when no oversubscription exists).  As These networks scale, the
   cabling requirements increase dramatically.  For example, a 3-stage
   non-blocking Clos network where each stage has 24 nodes and each node
   has 24 ports would contain 1152 physical connections.
   Troubleshooting deployments of this scale is difficult and time
   consuming, both logically and physically.  Operators are then forced
   to develop additional software tools in order to address this problem
   (or incur significant delays).  RIFT can identify mis-cabled
   connections natively, thereby reducing operational and development
   costs.








Wei, et al.             Expires 28 December 2020                [Page 8]

Internet-Draft        RIFT Applicability Statement             June 2020


4.2.  Metro Fabrics

   The demand for bandwidth is increasing steadily and is not only
   driven by environments in close proximity to content providers (e.g.
   data centers), but also by environments n close proximity to content
   consumers as well (e.g. end users).  These environments are typically
   clustered in metro areas with their own network architectures that
   can benefit from simplified Clos topologies.

4.3.  Enterprise Fabrics

   Commercial buildings are often cabled in a similar manner to that of
   a Clos or an isomorphic equivalent.  As the number of floors grow,
   the control plane scale requirements to support the Clos (or Clos-
   like) topology grows as well.  This presents a challenge for
   traditional IGPs that do not support an arbitrary number of levels
   (which RIFT does naturally).  Moreover, hardware deployed in
   enterprise networks are not quite as powerful as their counterparts
   in data center deployments.  Under normal conditions, RIFT can prove
   particularly cost effective in this area in that it maintains only
   the minimum RIB/FIB required and control plane traffic required to
   converge is less than that of other IGPs.

4.4.  CloudCO

   The Cloud Central Office (CloudCO) is a new stage of telecom Central
   Office.  It takes advantage of Software Defined Networking (SDN) and
   Network Function Virtualization (NFV) in conjunction with general
   purpose hardware to optimize current networks.  The following figure
   illustrates this architecture at a high level.  It describes a single
   instance or macro-node of cloud CO.  An Access I/O module faces a
   Cloud CO Access Node, and the CPEs behind it.  A Network I/O module
   is facing the core network.  The two I/O modules are interconnected
   by a leaf and spine fabric.  [TR-384] RIFT fits well into the typical
   spine-leaf deployments in a CloudCO, as the architecture needs to be
   adaptable, agile, scalable, and dynamic.















Wei, et al.             Expires 28 December 2020                [Page 9]

Internet-Draft        RIFT Applicability Statement             June 2020


        +---------------------+           +----------------------+
        |         Spine       |           |     Spine            |
        |         Switch      |           |     Switch           |
        +------+---+------+-+-+           +--+-+-+-+-----+-------+
        |      |   |      | | |              | | | |     |       |
        |      |   |      | | +-------------------------------+  |
        |      |   |      | |                | | | |     |    |  |
        |      |   |      | +-------------------------+  |    |  |
        |      |   |      |                  | | | |  |  |    |  |
        |      |   +----------------------+  | | | |  |  |    |  |
        |      |          |               |  | | | |  |  |    |  |
        |  +---------------------------------+ | | |  |  |    |  |
        |  |   |          |               |    | | |  |  |    |  |
        |  |   |   +-----------------------------+ |  |  |    |  |
        |  |   |   |      |               |    |   |  |  |    |  |
        |  |   |   |      |   +--------------------+  |  |    |  |
        |  |   |   |      |   |           |    |      |  |    |  |
        +--+ +-+---+--+ +-+---+--+     +--+----+--+ +-+--+--+ +--+
        |L | | Leaf   | | Leaf   |     |  Leaf    | | Leaf  | |L |
        |S | | Switch | | Switch |     |  Switch  | | Switch| |S |
        ++-+ +-+-+-+--+ +-+-+-+--+     +--+-+--+--+ ++-+--+-+ +-++
         |     | | |      | | |           | |  |     | |  |     |
         |   +-+-+-+--+ +-+-+-+--+     +--+-+--+--+ ++-+--+-+   |
         |   |Compute | |Compute |     | Compute  | |Compute|   |
         |   |Node    | |Node    |     | Node     | |Node   |   |
         |   +--------+ +--------+     +----------+ +-------+   |
         |   || VAS5 || || vDHCP||     || vRouter|| ||VAS1 ||   |
         |   |--------| |--------|     |----------| |-------|   |
         |   |--------| |--------|     |----------| |-------|   |
         |   || VAS6 || || VAS3 ||     || v802.1x|| ||VAS2 ||   |
         |   |--------| |--------|     |----------| |-------|   |
         |   |--------| |--------|     |----------| |-------|   |
         |   || VAS7 || || VAS4 ||     ||  vIGMP || ||BAA  ||   |
         |   |--------| |--------|     |----------| |-------|   |
         |   +--------+ +--------+     +----------+ +-------+   |
         |                                                      |
        ++-----------+                                +---------++
        |Network I/O |                                |Access I/O|
        +------------+                                +----------+


                Figure 2: An example of CloudCO architecture









Wei, et al.             Expires 28 December 2020               [Page 10]

Internet-Draft        RIFT Applicability Statement             June 2020


4.5.  Internal Router Switching Fabrics

   It is common in high-speed communications switching and routing
   devices to use fabrics when a crossbar is not feasible due to cost,
   head-of-line blocking or size trade-offs.  Normally such fabrics are
   not self-healing or rely on 1:/+1 protection schemes, but it is
   conceivable to use RIFT to operate Clos fabrics that can effectively
   deal with interconnection or subsystem failures in such cases.  RIFT
   is not IP specific, so any link addressing scheme connecting internal
   subnets is possible.

5.  Deployment Considerations

   RIFT presents the opportunity for organizations building and
   operating IP fabrics to simplify their operational and deployment
   activities, while achieving many other desirable properties
   associated with dynamic routing protocols in such a substrate:

   *  RIFT design follows minimum blast radius and minimum necessary
      epistemological scope philosophy which leads to very good scaling
      properties while delivering maximum reactiveness.

   *  RIFT allows for extensive Zero Touch Provisioning within the
      protocol.  In its most extreme version RIFT does not rely on any
      specific addressing and for IP fabric can operate using IPv6 ND
      [RFC4861] only.

   *  RIFT has provisions to detect common IP fabric mis-cabling
      scenarios.

   *  RIFT automatically negotiates BFD on every link, paving the way
      for IP and micro-BFD [RFC7130] to replace LAG/MC-LAG (which can
      hide bandwidth imbalances in failure scenarios).  Further
      automatic link validation techniques such as TWAMP [RFC5357] could
      be supported as well.

   *  RIFT inherently solves many difficult problems associated with the
      use of traditional routing topologies with dense meshes and high
      degress of ECMP by including automatic bandwidth balancing, flood
      reduction, and automatic route disaggregation on failures.

   *  RIFT reduces FIB size towards the bottom of the IP fabric where
      most nodes reside and with that allows for cheaper hardware at the
      edge while introducing modern IP fabric architectures that enable
      new features (e.g. server multi-homing).






Wei, et al.             Expires 28 December 2020               [Page 11]

Internet-Draft        RIFT Applicability Statement             June 2020


   *  RIFT provides valley-free routing that is loop free.  This allows
      the use of any such valley-free path in bi-sectional fabric
      bandwidth between two destinations irrespective of their metrics,
      which can be used to load-balance on the fabric in different ways.

   *  RIFT includes a key-value distribution mechanism which allows for
      many future applications such as automatic provisioning of basic
      overlay services or automatic key roll-overs across entire
      fabrics.

   *  RIFT is designed for minimum delay in case of prefix mobility on
      the fabric.

5.1.  Route Disaggregation

   Route disaggregation is the procedure whereby [RIFT] advertises a
   more specific route southbound in addition to the default route.  It
   is useful in scenarios where a prefix is reachable by only some of
   the parent nodes, but not others at the same level in the fabric.
   Disaggregation is mandatory on ToF nodes because any ToF node that
   cannot reach a prefix will blackhole traffic for that prefix.

   There are two types of disaggregation, positive and negative.
   Positive disaggregation indicates a nodes ability to reach a given
   prefix, whereas negative disaggregation indiciates a nodes inability
   to reach a given prefix.

5.1.1.  Positive Disaggregation

   Positive disaggregation occurs as a result of south reflection after
   a failure due to the fact that nodes at a given level will be aware
   of reachability information of other nodes at the same level.  Those
   nodes will see no longer see the prefixes that were imapcted by the
   failure.  This results in the generation of postively disaggregated
   (more specific) prefix advertisements to southbound nodes, which then
   use the remaining path(s) toward the disaggregated prefix based on
   longest prefix match.

   As previously stated, RIFT only maintains routing information
   necessary for a given level.  Positively disaggregated are no
   different, they are only flooded as far south as necessary.  These
   routes not being transitive in nature means that positive
   disaggregation is significantly more scalable in large fabrics.

   During positive disaggregation, the first ToF node to advertise the
   more specific prefix may transiently receive the majority of the
   traffic for that prefix until the necessary FIB entries are installed
   on all ToF nodes.  ToP nodes that prefer not to inject the longer



Wei, et al.             Expires 28 December 2020               [Page 12]

Internet-Draft        RIFT Applicability Statement             June 2020


   prefix in order to receive more advertisements and spread traffic
   more evenly, will continue to forward traffic to the blackholed
   destination for a similar period of time.

5.1.2.  Negative Disaggregation

           +--------------------------------+
           | +------------------------------|-+
           | |          +-------------------|-|----------+
           | |          | +-----------------|-|----------|-+
           | |          | |                 | |          | |
         +-+-+---+    +-+-+---+           +-+-+---+    +-+-+---+
         |ToF  A1|    |ToF  A2|           |ToF  B1|    |ToF  B2| LEVEL 2
         +-------+    +-------+           +-------+    +-------+
         |       |    |       |           |       |    |       |
         |       |    |       +-----------------+ |    |       |
         |       +--------------------------+   | |    |       |
         |            |                   | |   | |    |       |
         |     +------+                   | |   | +------+     |
         |     |        +-----------------+ |   |      | |     |
         |     |        |   +--------------------------+ |     |
         |     |        |   |               |   |        |     |
         +-----+-+    +-+---+-+           +-+---+-+    +-+-----+
         |Spin111|    |Spin112|           |Spin121|    |Spin122| LEVEL 1
         +-+---+-+    ++----+-+           +-+---+-+    ++----+-+
           |   |       |    |               |   |       |    |
           |   +---------+  |               |   +---------+  |
           |           | |  |               |           | |  |
           |   +-------+ |  |               |   +-------+ |  |
           |   |         |  |               |   |         |  |
         +-+---+-+    +--+--+-+           +-+---+-+    +--+--+-+
         |Leaf111|    |Leaf112+           |Leaf121|    |Leaf122| LEVEL 0
         +-------+    +-------+           +-------+    +-------+
        +--------PoD1----------+         +----------PoD2--------+



                        Figure 3: Interfabric Rings

   Multi-plane fabrics present challenges that positive disaggregation
   cannot solve.  This is true whether the topology was designed with
   multiple planes or if failures in a single plane topology resulted in
   a partitioned fabric.  The challenge arises when a fabric is
   partitioned and a leaf node loses connectivity through a subset of
   ToF nodes.  ToF nodes are required to share the same northbound
   database, this happens naturally in a single plane environment due to
   northbound flooding and south reflection.  Whereas in multi-plane
   environments it does not because ToF nodes in one plane will not be



Wei, et al.             Expires 28 December 2020               [Page 13]

Internet-Draft        RIFT Applicability Statement             June 2020


   aware of another planes leaves.  This lack of prefix information will
   cause traffic to be blackholed at the ToF nodes or experience
   suboptimal routing.

   Figure 3 illustrates how to resolve this by utilizing two revenue
   ports on each ToF node to interconnect East-West rings between the
   other ToF nodes.  The rings will facilitate northbound flooding in
   both directions so that ToF nodes will learn prefix information from
   other planes.  This introduces negative disaggregation, ToF nodes can
   now advertise more specific negatively disaggregated prefixes that
   indicate that they cannot reach them.  Unlike positive
   disaggregation's non-transitive properties, negatively disaggregated
   prefixes are transitive, so they are advertised all the way down to
   the leaf nodes in the other planes.  This means that there is far
   more control plane flooding for negatively disaggregated prefixes
   compared to that of positively disaggregated prefixes.  As nodes
   receive negatively disaggregated prefixes, they implicitly discern
   that ports that do not receive them are valid paths and install
   positively disaggregated routes for those paths.  Logic required to
   build necessary forwarding plane state for negatively disaggregated
   prefixes is dependent on software implementation and therefore can
   cause additional churn due to route lookups.

   It is worth noting that single plane implementations would also
   benefit from the implementation of rings between the ToF nodes to
   protect against cascading failures where the fabric may become
   partitioned.  Adding more connectivity between spine and ToF nodes to
   avoid the partitioning altogether is another option.

   Like positive disaggregation, negative disaggregation also may suffer
   from transient forwarding concerns.  The last ToF node(s) to inject
   the negatively disaggregated route may also end up receiving the
   majority of the traffic for a short period of time.  For example,
   this would occur when a totally unreachable prefix becomes
   disaggregated, but practically speaking, would not be recommended.

5.2.  Suboptimal Routing on Link Failures














Wei, et al.             Expires 28 December 2020               [Page 14]

Internet-Draft        RIFT Applicability Statement             June 2020


                  +--------+          +--------+
                  | ToF21  |          |  ToF22 |                LEVEL 2
                  ++--+-+-++          ++-+--+-++
                   |  | | |            | |  | +
                   |  | | |            | |  | linkTS8
     +-------------+  | +-+linkTS3+-+  | |  | +--------------+
     |                |   |         |  | |  +                |
     |    +----------------------------+ |  linkTS7          |
     |    |           |   |         +    +  +                |
     |    |           |   +-------+linkTS4+------------+     |
     |    |           |             +    +  |          |     |
     |    |           |     +------------+--+          |     |
     |    |           |     |       |  linkTS6         |     |
   +-+----++         ++-----++     ++------+          ++-----++
   |Spin111|         |Spin112|     |Spin121|          |Spin122| LEVEL 1
   +-+---+-+         ++----+-+     +-+---+-+          ++---+--+
     |   |            |    |         |   |             |   |
     |   +--------------+  |         +   ++XX+linkSL6+---+ +
     |                | |  |      linkSL5              | | linkSL8
     |   +------------+ |  |         +   +---+linkSL7+-+ | +
     |   |              |  |         |   |               | |
   +-+---+-+         +--+--+-+     +-+---+-+          +--+-+--+
   |Leaf111|         |Leaf112|     |Leaf121|          |Leaf122| LEVEL 0
   +-+-----+         ++------+     +-----+-+          +-+-----+
     +                +                  +              +
   Prefix111         Prefix112     Prefix121          Prefix122


          Figure 4: Suboptimal routing upon link failure use case

   As shown in Figure 4, the result of south reflection between
   Spine121-Leaf121-Spine122 and Spin121-Leaf122-Spine122 will be that
   Spine121 and Spine122 see each other as level 1 nodes.

   Without the disaggregation mechanism, when linkSL6 fails, traffic
   from Leaf121 to Prefix122 may traverse suboptimal paths like
   linkSL5/linkTS3/linkTS4/linkSL8 or linkSL5/linkTS6/linkTS4/linkSL8
   (based purely on the default route) to get to Leaf122.  This
   suboptimal routing pattern is an example of "bow-tieing".

   With the disaggregation mechanism, when linkSL6 fails, Spine122 will
   detect the failure according to the reflected Node S-TIE from
   Spine121.  Spine122 will then explicitly advertise Prefix122 in a
   Disaggregated Prefix S-TIE (PrefixesElement(Prefix122, cost 1)).  The
   traffic from Leaf121 to Prefix122 will only traverse linkSL7 (based
   on longest-prefix match) and then linkSL8 to Leaf122.





Wei, et al.             Expires 28 December 2020               [Page 15]

Internet-Draft        RIFT Applicability Statement             June 2020


5.3.  Black-Holing on Link Failures

                   +--------+          +--------+
                   | ToF 21 |          | ToF 22 |                LEVEL 2
                   ++-+--+-++          ++-+--+-++
                    | |  | |            | |  | |
                    | |  | |            | |  | linkTS8
     +--------------+ |  +--linkTS3-X+  | |  | +--------------+
     linkTS1          |    |         |  | |  |                |
     |    +-----------------------------+ |  linkTS7          |
     |    |           |    |         |    |  |                |
     |    |      linkTS2   +--------linkTS4-X-----------+     |
     |    |           |              |    |  |          |     |
     |   linkTS5      +-+    +---------------+          |     |
     |    |             |    |       |  linkTS6         |     |
   +-+----++          +-+-----+     ++----+-+          ++-----++
   |Spin111|          |Spin112|     |Spin121|          |Spin122| LEVEL 1
   +-+---+-+          ++----+-+     +-+---+-+          ++---+--+
     |   |             |    |         |   |             |   |
     |   +---------------+  |         |   +----linkSL6----+ |
     linkSL1           | |  |      linkSL5              | | linkSL8
     |   +---linkSL3---+ |  |         |   +----linkSL7--+ | |
     |   |               |  |         |   |               | |
   +-+---+-+          +--+--+-+     +-+---+-+          +--+-+--+
   |Leaf111|          |Leaf112|     |Leaf121|          |Leaf122| LEVEL 0
   +-+-----+          ++------+     +-----+-+          +-+-----+
     +                 +                  +              +
   Prefix111          Prefix112     Prefix121          Prefix122

             Figure 5: Black-holing upon link failure use case

   The scenario in Figure 4 illustrates a case where a double link
   failure occurs, resulting in traffic being blackholed.

   Without the disaggregation mechanism, when linkTS3 and linkTS4 fail,
   50% of the traffic from Leaf111 toward Prefix122 would be black
   holed.  The traffic may traverse either linkSL1/linkTS1 or linkSL3/
   linkTS2 to reach ToF21, but would ultimately be dropped when trying
   to get to Leaf122 via linkTS3 or linkTS4.

   With the disaggregation mechanism, when linkTS3 and linkTS4 fail,
   ToF22 will detect the failure according to the reflected Node S-TIE
   from Spine111/Spine112 (representing ToF21).  ToF22 will then
   explicitly originate an S-TIE with Prefix121 and Prefix122, which is
   then flooded to Spine111/Spine112/Spine121/Spine122.






Wei, et al.             Expires 28 December 2020               [Page 16]

Internet-Draft        RIFT Applicability Statement             June 2020


   Traffic from Leaf111 toward Prefix122 will then be routed toward
   linkTS5 or linkTS7 based on longest-prefix match (instead of linkTS1
   or linkTS2)

5.4.  Zero Touch Provisioning (ZTP)

   RIFT nodes may operate in Zero Touch Provisioning (ZTP) mode allowing
   RIFT to automatically configure a node's level after it is attached
   to the topology.  ZTP allows new devices to be installed and
   automatically join the topology with little or no preconfiguration.
   Only deployments utilizing ToF nodes would require intial
   configuration, whereas other implementations such as leaf only
   without the use of leaf-2-leaf procedures, would not.

   The most important concept for ZTP is the automatic level derivation
   procedure.  All ToF nodes are explicitly marked with the
   TOP_OF_FABRIC flag which is used by other ZTP nodes to derive their
   own respective levels.  The derivation of the level at each node
   occurs based on information contained in LIEs received from its
   neighbors.  Nodes use the information to attach to the highest
   possible point in the fabric.  This guarantees that even if LIEs are
   received from a node at a "lower" level before that of a "higher"
   level, it will ignore the "lower" level's LIEs in order to ensure
   proper connectivity with nodes "above" it.

5.4.1.  LEAF_ONLY Flag

























Wei, et al.             Expires 28 December 2020               [Page 17]

Internet-Draft        RIFT Applicability Statement             June 2020


      +-------+    +-------+        +-------+    +-------+
      |ToF  A1|    |ToF  A2|        |ToF  A1|    |ToF  A2|    LEVEL 2
      +-------+    +-------+        +-------+    +-------+
      |       |    |       |                |            |
      |    +-------+       |                |            |
      +    +  |            |  ====>         |            |
      X    X  +------+     |                +------+     |
      +    +         |     |                       |     |
      +----+--+    +-+-----+                     +-+-----+
      |Spine11|    |Spine12|                     |Spine12|    LEVEL 1
      +-+---+-+    ++----+-+                     ++----+-+
        |   |       |    |                        |    |
        |   +---------+  |                        |    |
        |           | |  |                        |    |
        |   +-------+ |  |                +-------+    |
        |   |         |  |                |            |
      +-+---+-+    +--+--+-+        +-----+-+    +-----+-+
      |Leaf111|    |Leaf112|        |Leaf111|    |Leaf112|    LEVEL 0
      +-------+    +-------+        +-+-----+    +-+-----+
                                      |            |
                                      |   +--------+
                                      |   |
                                    +-+---+-+
                                    |Spine11|
                                    +-------+

                           Figure 6: Fallen spine

   If ZTP is being used, the autoderivation mechanism can have
   counterintuitive results in certain failure scenarios.  For example,
   Figure 6 shows an example of a fallen spine.  In this case, Spine11
   would autoderive a level lower than that of Leaf111 and Leaf112.

   This can be prevented by setting the LEAF_ONLY flag on devices that
   are expected to be leaves (Leaf111 and Leaf112).  Since level -1 is
   invalid, Spine11 would not derive a valid level, and will be isolated
   from the fabric.  Leaf111 and Leaf112 could then report the miscabled
   links to Spine12.

5.5.  Miscabling Examples











Wei, et al.             Expires 28 December 2020               [Page 18]

Internet-Draft        RIFT Applicability Statement             June 2020


        +----------------+              +-----------------+
        |     ToF21      |       +------+      ToF22      |   LEVEL 2
        +-------+----+---+       |      +----+---+--------+
        |       |    |   |       |      |    |   |        |
        |       |    |   +----------------------------+   |
        |   +---------------------------+    |   |    |   |
        |   |   |    |           |           |   |    |   |
        |   |   |    |   +-----------------------+    |   |
        |   |   +------------------------+   |        |   |
        |   |        |   |       |       |   |        |   |
      +-+---+-+    +-+---+-+     |     +-+---+-+    +-+---+-+
      |Spin111|    |Spin112|     |     |Spin121|    |Spin122| LEVEL 1
      +-+---+-+    ++----+-+     |     +-+---+-+    ++----+-+
        |   |       |    |       |       |   |       |    |
        |   +---------+  |     link-M    |   +---------+  |
        |           | |  |       |       |           | |  |
        |   +-------+ |  |       |       |   +-------+ |  |
        |   |         |  |       |       |   |         |  |
      +-+---+-+    +--+--+-+     |     +-+---+-+    +--+--+-+
      |Leaf111|    |Leaf112+-----+     |Leaf121|    |Leaf122| LEVEL 0
      +-------+    +-------+           +-------+    +-------+

                Figure 7: A single plane miscabling example

   The RIFT control protocol can discover the physical links
   automatically and be able to detect cabling that violates fat-tree or
   Clos topology constraints.  It react accordingly to such mis-cabling
   attempts, at a minimum preventing adjacencies between nodes from
   being formed and traffic from being forwarded on those mis-cabled
   links.  Leaf112 will in such scenario use link-M to derive its level
   (unless it is leaf) and can report links to spines 111 and 112 as
   miscabled unless the implementations allows horizontal links.

   Figure 7 shows a single plane miscabling example, it is a perfect
   fat-tree fabric except link-M connecting Leaf112 to ToF22.  In this
   case, Leaf112 will use link-M to (incorrectly) derive its level from
   ToF22 and report the incorrectly cabled link to Spine111 and
   Spine112.













Wei, et al.             Expires 28 December 2020               [Page 19]

Internet-Draft        RIFT Applicability Statement             June 2020


      +-------+    +-------+           +-------+    +-------+
      |ToF  A1|    |ToF  A2|           |ToF  B1|    |ToF  B2| LEVEL 2
      +-------+    +-------+           +-------+    +-------+
      |       |    |       |           |       |    |       |
      |       |    |       +-----------------+ |    |       |
      |       +--------------------------+   | |    |       |
      |            |                   | |   | |    |       |
      |     +------+                   | |   | +------+     |
      |     |        +-----------------+ |   |      | |     |
      |     |        |   +--------------------------+ |     |
      |  A  |        | B |               | A |        |  B  |
      +-----+-+    +-+---+-+           +-+---+-+    +-+-----+
      |Spin111|    |Spin112|      +----+Spin121|    |Spin122| LEVEL 1
      +-+---+-+    ++----+-+      |    +-+---+-+    ++----+-+
        |   |       |    |        |      |   |       |    |
        |   +---------+  |        |      |   +---------+  |
        |           | |  |      link-W   |           | |  |
        |   +-------+ |  |        |      |   +-------+ |  |
        |   |         |  |        |      |   |         |  |
      +-+---+-+    +--+--+-+      |    +-+---+-+    +--+--+-+
      |Leaf111|    |Leaf112+------+    |Leaf121|    |Leaf122| LEVEL 0
      +-------+    +-------+           +-------+    +-------+

     +--------PoD#1----------+       +---------PoD#2---------+

               Figure 8: A multiple plane miscabling example

   Figure 8 shows a multi-plane miscabling example.  Since Leaf112 and
   Spine121 belong to different PoDs via link-W, link-W would be
   considered mis-cabled and adjacency formation would be prevented.

5.6.  Mobile Edge and Anycast

   When a physical or a virtual node changes its point of attachement in
   the fabric from one leaf to another leaf, new routes must be
   installed that supercede the old ones.  Since flooding flows
   Northwards, the nodes (if any) between the previous-leaf and the
   common parent are not immediately aware that the path via previous-
   leaf is obsolete and a stale route may exist for a period of time.
   The common parent needs to select the most recent route advertisement
   in order to install the correct route via the new leaf node.  This
   requires that the fabric determine the sequence of the movements of
   the mobile node.

   On one hand, a sequence counter can provide the total order for that
   period, but it will eventually wrap.  On the other hand, a timestamp
   provides a permanent order, but it may miss movements that happen too
   quickly compared to the granularity of the timing information.  It is



Wei, et al.             Expires 28 December 2020               [Page 20]

Internet-Draft        RIFT Applicability Statement             June 2020


   not envisioned in the short term that the average fabric supports a
   precision time protocol, and the precision that may be available with
   the Network Time Protocol [RFC5905], in the order of 100 to 200ms,
   may not be necessarily enough to cover all scenarios (e.g. fast
   mobility of a Virtual Machine.

   The section of [RIFT] titled "Mobility" specifies a hybrid method
   that combines a sequence counter from the mobile node and a timestamp
   from the network taken at the leaf when the route is injected.  If
   the timestamps of the concurrent advertisements are comparable (i.e.
   more distant than the precision of the timing protocol), then the
   timestamp alone is used to determine the most current routes.
   Otherwise, the sequence counter from the mobile node, if available,
   is used.  One caveat is that the sequence counter must not wrap
   within the precision of the timing protocol.  Another is that the
   mobile node may not even provide a sequence counter, in which case
   the mobility itself must be slower than the precision of the timing.

   Mobility must not be confused with anycast.  In both cases, the same
   address is injected in RIFT at different leaves.  In the case of
   mobility only the most current route must be retained, since the
   mobile node changed its point of attachement for a leaf to the next.
   In the case of anycast, the node may be either multihomed or
   reachable beyond the fabric via multiple routes that are
   redistributed to different leaves.  Regardless, in the case of
   anycast, the multiple routes are equally valid and should be
   retained.  Without further information from the redistributed routing
   protocol, it is impossible to sort out a movement from a
   redistribution that happens asynchronously on different leaves.
   [RIFT] expects that anycast addresses are advertised within the
   timing precision, which is typically the case with a low-precision
   timing and a multihomed node.  Beyond that time interval, RIFT
   interprets the lag as a mobility and only the most current route is
   retained.

   When using IPv6 [RFC8200], RIFT suggests leveraging"Registration
   Extensions for IPv6 over Low-Power Wireless Personal Area Network
   (6LoWPAN) Neighbor Discovery (ND)" [RFC8505] as the IPv6 ND
   interaction between the mobile node and the leaf.  This provides not
   only a sequence counter but also a lifetime and a security token that
   may be used to protect the ownership of an address.  When using
   [RFC8505], the parallel registration of an anycast address to
   multiple leaves is done with the same sequence counter, whereas the
   sequence counter is incremented when the point of attachement
   changes.  This way, it is possible to differentiate a mobile node
   from a multihomed node, even when the mobility happens within the
   timing precision.  It is also possible for a mobile node to be
   multihomed as well, but only change one of its points of attachement.



Wei, et al.             Expires 28 December 2020               [Page 21]

Internet-Draft        RIFT Applicability Statement             June 2020


5.7.  Address Family Considerations

   LIEs are exchanged over all links running RIFT to perform Link
   (Neighbor) Discovery.  A node MUST NOT originate LIEs for an address
   family if it does not process received LIEs for that family.  LIEs on
   same link are considered part of the same negotiation independent of
   the address families they support.  An implementation MUST be ready
   to accept TIEs with the same address family that sourced the LIEs.

5.7.1.  IPv4 over IPv6

   RIFT allows advertising IPv4 prefixes over IPv6.  The IPv6 address
   family is configured via the usual ND mechanisms, at which point IPv4
   can use IPv6 nexthops (analogous to RFC5549).  RIFT provides an
   indication whether a node is IPv4 forwarding capable and
   implementations are possible where different routing tables are
   computed per address family as long as the computation remains loop-
   free.

                            +-----+        +-----+
                 +---+---+  | ToF |        | ToF |
                     ^      +--+--+        +-----+
                     |      |  |           |     |
                     |      |  +-------------+   |
                     |      |     +--------+ |   |
                     |      |     |          |   |
                    V6      +-----+        +-+---+
                 Forwarding |SPINE|        |SPINE|
                     |      +--+--+        +-----+
                     |      |  |           |     |
                     |      |  +-------------+   |
                     |      |     +--------+ |   |
                     |      |     |          |   |
                     v      +-----+        +-+---+
                 +---+---+  |LEAF |        | LEAF|
                            +--+--+        +--+--+
                               |              |
                  IPv4 prefixes|              |IPv4 prefixes
                               |              |
                           +---+----+     +---+----+
                           |   V4   |     |   V4   |
                           | subnet |     | subnet |
                           +--------+     +--------+

                          Figure 9: IPv4 over IPv6






Wei, et al.             Expires 28 December 2020               [Page 22]

Internet-Draft        RIFT Applicability Statement             June 2020


5.8.  In-Band Reachability of Nodes

   RIFT doesn't require that nodes in the fabric have reachable
   addresses.  However, there are operational purposes that may require
   such access.

                         +-------+      +-------+
                         | ToF1  |      | ToF2  |
                         ++---- ++      ++-----++
                          |     |        |     |
                          |     +----------+   |
                          |     +--------+ |   |
                          |     |          |   |
                         ++-----++      +--+---++
                         |SPINE1 |      |SPINE2 |
                         ++-----++      ++-----++
                          |     |        |     |
                          |     +----------+   |
                          |     +--------+ |   |
                          |     |          |   |
                         ++-----++      +--+---++
                         | LEAF1 |      | LEAF2 |
                         +---+---+      +-------+
                             |
                             |NMS


                  Figure 10: In-Band reachability of node

   Figure 10 shows an example of a NMS (Network Monitoring System)
   attaching to LEAF1.  The NMS will have reachability to all of the
   nodes, however it may take suboptimal paths through the fabric.

   If the NMS needs to access LEAF2's loopback address for monitoring
   purposes, the best path will be taken as LEAF2's loopback address is
   flooded in its N-TIEs.  Consider that the NMS needs to access
   SPINE2's loopback address, while that address will be flooded by
   SPINE2 in its N-TIEs, not all resulting paths are optimal.  NMS could
   reach SPINE2 via either LEAF1-SPINE2 (which is preferred),
   LEAF1-SPINE1-ToF1-SPINE2, or LEAF1-SPINE1-ToF2-SPINE2.  Similarly, if
   the NMS were to need access to ToF2's loopback address, the resulting
   traffic may transit ToF1.  To facilitate direct reachability for
   situations that require it, the loopback addresses of any nodes can
   be advertised in N-TIEs and S-TIEs.  This allows nodes to have the
   most specific routes toward the loopback addresses.






Wei, et al.             Expires 28 December 2020               [Page 23]

Internet-Draft        RIFT Applicability Statement             June 2020


5.9.  Server Connectivity to the Fabric

   Though not always the case, servers are typically connected to IP
   fabrics via L2 and do not participate in the underlay network's
   routing protocol.  Routing on the host is becoming more common and
   running RIFT on servers in order to participate directly in the
   underlay as leaf nodes may be beneficial.  Additionally, RIFT
   supports multihoming in either scenario.

   There are various factors that operators should consider when decided
   whether servers should reside in the underlay or not.  A detailed
   overview of these factors is outside the scope of this document,
   however a brief overview is useful.

   *  Servers running RIFT in the underlay can manage their own overlay
      tunnels, thereby reducing feature complexity required RIFT nodes
      connected to them (e.g.  VXLAN).  Conversely, operators may also
      find it beneficial to offload overlay tunnel mechanisms to RIFT
      nodes if server functions are not the responsibility of the
      operator.

   *  Servers running RIFT in the underlay can leverage RIFT's ZTP
      mechanisms to manage aspects of deployment and provisioning.
      However, this may not be desirable depending upon staffing
      responsibilities.

5.9.1.  Multihoming Servers
























Wei, et al.             Expires 28 December 2020               [Page 24]

Internet-Draft        RIFT Applicability Statement             June 2020


                     +---+         +---+         +---+
                     |ToF|         |ToF|         |ToF|
                     +---+         +---+         +---+
                     |   |         |   |         |   |
                     |   +----------------+      |   |
                     |             |   |  |      |   |
                     |          +----------------+   |
                     |          |  |   |  |          |
                     +----------+--+   +--+----------+
                     | Spine|ToR1  |   | Spine|ToR2  |
                     +--+------+---+   +--+-------+--+
                 +---+  |      |   |   |  |       |  +---+
                 |      |      |   |   |  |       |      |
                 |   +-----------------+  |       |      |
                 |   |  |   +-------------+       |      |
                 |   |  |   |  |   |---------X-------+   |
                 X   |  X   |  +--------X-----+   |  |   |
                 |   |  |   |                 |   |  |   |
                 +---+  +---+                 +---+  +---+
                 |   |  |   |                 |   |  |   |
                 +---+  +---+  .............  +---+  +---+
                 SV(1) SV(2)                 SV(n+1) SV(n)

                       Figure 11: Multihoming servers

   RIFT supports the multihoming of servers, which has clear advantages
   in terms of service availability.  Consider a typical server
   deployment in a data center where servers are single homed to a ToR.
   Activities like ToR maintenance or even common failures can leave
   servers completely isolated, the result of the isolation is often
   service impact.  Multihoming removes these problems.

   Multihoming servers may also require further consideration, such as
   larger FIB sizes on servers.  A worst case scenario is where all
   multihomed servers at the same level become disaggregated from each
   other.  Consider the single plane fabric in Figure 11 where ToR1
   loses connectivity to all leaves (servers), all server prefixes would
   become disaggregated resulting in rapic FIB expansion of n-1 of more
   specific routes.  One way to manage situations like this would be to
   disaggregate ToR to server connectivity from the start.  Servers
   could contain a couple tens of routes in addition to the default to
   prevent outages and unnecessary flooding.









Wei, et al.             Expires 28 December 2020               [Page 25]

Internet-Draft        RIFT Applicability Statement             June 2020


5.9.2.  Securing Servers

   As previously stated, typical server connectivity to an IP fabric is
   done with layer 2.  This presents an attack vector that RIFT can
   easily address with its built-in security mechanisms and extending it
   to the host.  Section 4.4 of the [RIFT] main specification, details
   additional security concepts.

5.10.  Fabrics with a Controller

   There are different methods to deploy a controller, two possibilities
   are to attach it to the ToF nodes or to a leaf node.

                                     +------------+
                                     | Controller |
                                     ++----------++
                                      |          |
                                      |          |
                                 +----++        ++----+
                     -------     | ToF |        | ToF |
                        |        +--+--+        +-----+
                        |        |  |           |     |
                        |        |  +-------------+   |
                        |        |     +--------+ |   |
                        |        |     |          |   |
                                 +-----+        +-+---+
                    RIFT domain  |SPINE|        |SPINE|
                                 +--+--+        +-----+
                        |        |  |           |     |
                        |        |  +-------------+   |
                        |        |     +--------+ |   |
                        |        |     |          |   |
                        |        +-----+        +-+---+
                     -------     |LEAF |        | LEAF|
                                 +-----+        +-----+

                    Figure 12: Fabric with a controller

5.10.1.  Controller Attached to ToF

   If a controller is attached to the RIFT domain at the ToF level, it
   should be multihomed.  The controller's loopback prefix should be
   advertised southbound by the ToF and spine nodes to the leaves.  If a
   controller loses a link to a ToF node, it is important to ensure that
   the controller be unreachable from that ToF node (this may require
   the use of a separate mechanism).





Wei, et al.             Expires 28 December 2020               [Page 26]

Internet-Draft        RIFT Applicability Statement             June 2020


5.10.2.  Controller Attached to Leaf

   Controller's attached to leaf nodes required no special
   consideration.

5.11.  Internet Connectivity with Underlay

   If global addressing is required without the use of an overlay, an
   external default route needs to be advertised through the RIFT fabric
   to achieve internet access.  A more specific route describing the
   RIFT fabric should also be advertised by ToF and spine nodes in a
   Prefix S-TIE so not to impact forwarding for the rest of the fabric.

5.11.1.  Internet Default on the Leaf

   In cases where internet access is required for leaf nodes and the
   gateway is attached to another leaf, the leaf node terminating the
   gateway should advertise a defualt route in its Prefix N-TIEs.

5.11.2.  Internet Default on the ToFs

   In cases where internet access is required for leaf nodes and the
   gateway is attached to a ToF node, both the ToF and spine nodes
   should advertise a default route in their Prefix S-TIEs.

5.12.  Subnet Mismatches



                 +--------+                     +--------+
                 |        |  LIE          LIE   |        |
                 |   A    | +---->       <----+ |   B    |
                 |        +---------------------+        |
                 +--------+                     +--------+
                    X/24                           Y/24

                         Figure 13: Subnet mismatch


   As shown in the above figure, without further checks adjacency of
   node A and B may form, but the forwarding between node A and node B
   may fail because subnet X mismatches with subnet Y.  This would be
   true for any address family.








Wei, et al.             Expires 28 December 2020               [Page 27]

Internet-Draft        RIFT Applicability Statement             June 2020


   To prevent this, a RIFT implementation should check for subnet
   mismatches (e.g. how IS-IS does).  This can lead to scenarios where
   an adjacency, despite exchange of LIEs in both address families may
   end up having an adjacency with a single AF only.  This is a
   consideration especially in Section 5.7.1 scenarios.

5.13.  Anycast Considerations

                                 + traffic
                                 |
                                 v
                          +------+------+
                          |     ToF     |
                          +---+-----+---+
                          |   |     |   |
             +------------+   |     |   +------------+
             |                |     |                |
         +---+---+    +-------+     +-------+    +---+---+
         |       |    |       |     |       |    |       |
         |Spine11|    |Spine12|     |Spine21|    |Spine22| LEVEL 1
         +-+---+-+    ++----+-+     +-+---+-+    ++----+-+
           |   |       |    |         |   |       |    |
           |   +---------+  |         |   +---------+  |
           |           | |  |         |           | |  |
           |   +-------+ |  |         |   +-------+ |  |
           |   |         |  |         |   |         |  |
         +-+---+-+    +--+--+-+     +-+---+-+    +--+--+-+
         |       |    |       |     |       |    |       |
         |Leaf111|    |Leaf112|     |Leaf121|    |Leaf122| LEVEL 0
         +-+-----+    ++------+     +-----+-+    +-----+-+
           +           +                  +      ^     |
         PrefixA      PrefixB         PrefixA    | PrefixC
                                                 |
                                                 + traffic

                             Figure 14: Anycast

   RIFT handles anycast traffic natively in most scenarios (for example,
   traffic ingressing ToF nodes toward PrefixA hosted by Leaf111 and
   Leaf121).  However, in scenarios where anycasted traffic ingresses
   Leaf122 toward PrefixA, Spine21 and Spine22 will have no way of
   knowing that Leaf111 should also receive traffic for PrefixA, this
   results in Leaf121 receiving all traffic.  To manage this problem,
   policy guided prefixes should be implemented.

6.  Acknowledgements





Wei, et al.             Expires 28 December 2020               [Page 28]

Internet-Draft        RIFT Applicability Statement             June 2020


7.  Contributors

   The following people (listed in alphabetical order) contributed
   significantly to the content of this document and should be
   considered co-authors:

   Tony Przygienda

   Juniper Networks

   1194 N.  Mathilda Ave

   Sunnyvale, CA 94089

   US

   Email: prz@juniper.net

8.  Normative References

   [ISO10589-Second-Edition]
              International Organization for Standardization,
              "Intermediate system to Intermediate system intra-domain
              routeing information exchange protocol for use in
              conjunction with the protocol for providing the
              connectionless-mode Network Service (ISO 8473)", November
              2002.

   [TR-384]   Broadband Forum Technical Report, "TR-384 Cloud Central
              Office Reference Architectural Framework", January 2018.

   [RFC2328]  Moy, J., "OSPF Version 2", STD 54, RFC 2328,
              DOI 10.17487/RFC2328, April 1998,
              <https://www.rfc-editor.org/info/rfc2328>.

   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,
              "Neighbor Discovery for IP version 6 (IPv6)", RFC 4861,
              DOI 10.17487/RFC4861, September 2007,
              <https://www.rfc-editor.org/info/rfc4861>.

   [RFC5357]  Hedayat, K., Krzanowski, R., Morton, A., Yum, K., and J.
              Babiarz, "A Two-Way Active Measurement Protocol (TWAMP)",
              RFC 5357, DOI 10.17487/RFC5357, October 2008,
              <https://www.rfc-editor.org/info/rfc5357>.







Wei, et al.             Expires 28 December 2020               [Page 29]

Internet-Draft        RIFT Applicability Statement             June 2020


   [RFC7130]  Bhatia, M., Ed., Chen, M., Ed., Boutros, S., Ed.,
              Binderberger, M., Ed., and J. Haas, Ed., "Bidirectional
              Forwarding Detection (BFD) on Link Aggregation Group (LAG)
              Interfaces", RFC 7130, DOI 10.17487/RFC7130, February
              2014, <https://www.rfc-editor.org/info/rfc7130>.

   [RIFT]     Przygienda, T., Sharma, A., Thubert, P., Rijsman, B., and
              D. Afanasiev, "RIFT: Routing in Fat Trees", Work in
              Progress, Internet-Draft, draft-ietf-rift-rift-12, 26 May
              2020,
              <https://tools.ietf.org/html/draft-ietf-rift-rift-12>.

   [I-D.white-distoptflood]
              White, R., Hegde, S., and S. Zandi, "IS-IS Optimal
              Distributed Flooding for Dense Topologies", Work in
              Progress, Internet-Draft, draft-white-distoptflood-03, 3
              April 2020,
              <https://tools.ietf.org/html/draft-white-distoptflood-03>.

9.  Informative References

   [RFC5905]  Mills, D., Martin, J., Ed., Burbank, J., and W. Kasch,
              "Network Time Protocol Version 4: Protocol and Algorithms
              Specification", RFC 5905, DOI 10.17487/RFC5905, June 2010,
              <https://www.rfc-editor.org/info/rfc5905>.

   [RFC8200]  Deering, S. and R. Hinden, "Internet Protocol, Version 6
              (IPv6) Specification", STD 86, RFC 8200,
              DOI 10.17487/RFC8200, July 2017,
              <https://www.rfc-editor.org/info/rfc8200>.

   [RFC8505]  Thubert, P., Ed., Nordmark, E., Chakrabarti, S., and C.
              Perkins, "Registration Extensions for IPv6 over Low-Power
              Wireless Personal Area Network (6LoWPAN) Neighbor
              Discovery", RFC 8505, DOI 10.17487/RFC8505, November 2018,
              <https://www.rfc-editor.org/info/rfc8505>.

Authors' Addresses

   Yuehua Wei (editor)
   ZTE Corporation
   No.50, Software Avenue
   Nanjing
   210012
   China

   Email: wei.yuehua@zte.com.cn




Wei, et al.             Expires 28 December 2020               [Page 30]

Internet-Draft        RIFT Applicability Statement             June 2020


   Zheng Zhang
   ZTE Corporation
   No.50, Software Avenue
   Nanjing
   210012
   China

   Email: zzhang_ietf@hotmail.com


   Dmitry Afanasiev
   Yandex

   Email: fl0w@yandex-team.ru


   Tom Verhaeg
   Juniper Networks

   Email: tverhaeg@juniper.net


   Jaroslaw Kowalczyk
   Orange Polska

   Email: jaroslaw.kowalczyk2@orange.com


   Pascal Thubert
   Cisco Systems, Inc
   Building D
   45 Allee des Ormes - BP1200
   06254 MOUGINS - Sophia Antipolis
   France

   Phone: +33 497 23 26 34
   Email: pthubert@cisco.com


   Jordan Head
   Juniper Networks

   Email: jhead@juniper.net








Wei, et al.             Expires 28 December 2020               [Page 31]
